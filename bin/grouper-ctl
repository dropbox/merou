#!/usr/bin/env python

""" Command-line interface to various grouper administrative commands."""

import argparse
import BaseHTTPServer
import code
import getpass
import logging
import sshpubkey
from mrproxy import UserProxyHandler
from pprint import pprint
from sqlalchemy.exc import IntegrityError

import grouper
from grouper import models
from grouper.capabilities import Capabilities
from grouper.constants import SYSTEM_PERMISSIONS
from grouper.graph import GroupGraph
from grouper.settings import settings
from grouper.util import get_loglevel


sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def make_session():
    db_engine = models.get_db_engine(settings["database"])
    models.Session.configure(bind=db_engine)
    return models.Session()


def sync_db_command(args):
    db_engine = models.get_db_engine(settings["database"])
    models.Model.metadata.create_all(db_engine)

    # Add some basic database structures we know we will need if they don't exist.
    session = make_session()
    for name, description in SYSTEM_PERMISSIONS:
        test = models.Permission.get(session, name)
        if test:
            continue
        permission = models.Permission(name=name, description=description)
        try:
            permission.add(session)
            session.flush()
        except IntegrityError:
            session.rollback()
            raise Exception('Failed to create permission: %s' % (name, ))
        session.commit()


def user_proxy_command(args):
    class ServerArgs(object):
        def __init__(self, backend_port, username):
            self.backend_port = backend_port
            self.header = ["X-Grouper-User: %s" % username]

    username = args.username
    if username is None:
        username = getpass.getuser()
        logging.debug("No username provided, using (%s)", username)

    server = BaseHTTPServer.HTTPServer(
        ('localhost', args.listen_port), UserProxyHandler
    )
    server.args = ServerArgs(args.backend_port, args.username)
    try:
        logging.info(
            "Starting user_proxy on port (%s) with user (%s)",
            args.listen_port, username
        )
        server.serve_forever()
    except KeyboardInterrupt:
        print "Bye!"


def shell_command(args):
    session = make_session()
    code.interact(local={
        "session": session,
        "graph": GroupGraph.from_db(session),
        "m": models,
        "models": models,
        "pp": pprint,
    })


def capabilities_command(args):
    session = make_session()
    user = session.query(models.User).filter_by(username=args.username).scalar()
    if not user:
        print "No such user %s" % args.username
        return
    capabilities = Capabilities(user.capabilities)

    if args.subcommand == "list":
        for key in Capabilities.words:
            if capabilities.has(key):
                print key
    elif args.subcommand == "add":
        print "Setting %s on user %s" % (args.capability, args.username)
        capabilities.set(args.capability)
        user.capabilities = capabilities.dump()
        session.commit()
    elif args.subcommand == "rm":
        print "Removing %s from user %s" % (args.capability, args.username)
        capabilities.clear(args.capability)
        user.capabilities = capabilities.dump()
        session.commit()


def user_command(args):
    session = make_session()
    user = session.query(models.User).filter_by(username=args.username).scalar()
    if not user:
        if args.subcommand == "create":
            print "No such user %s, creating..." % args.username
            user = models.User(username=args.username, role_user=args.role_user).add(session)
            session.commit()
        else:
            print "No such user %s" % args.username
        return

    # User must exist at this point.

    if args.subcommand == "set_metadata":
        print "Setting %s metadata: %s=%s" % (args.username, args.metadata_key, args.metadata_value)
        if args.metadata_value == "":
            args.metadata_value = None
        user.set_metadata(args.metadata_key, args.metadata_value)
        session.commit()
    elif args.subcommand == "add_public_key":
        print "Adding public key for user..."

        try:
            pubkey = sshpubkey.PublicKey.from_str(args.public_key)
        except sshpubkey.exc.PublicKeyParseError:
            print "Public key appears to be invalid."
            return

        db_pubkey = models.PublicKey(
            user=user,
            public_key='%s %s %s' % (pubkey.key_type, pubkey.key, pubkey.comment),
            fingerprint=pubkey.fingerprint,
        )
        try:
            db_pubkey.add(session)
            session.flush()
        except IntegrityError:
            session.rollback()
            print "Key is already in use. Public keys must be unique."
            return
        session.commit()

        models.AuditLog.log(session, user.id, 'add_public_key',
                            '(Administrative) Added public key: {}'.format(pubkey.fingerprint),
                            on_user_id=user.id)


def group_command(args):
    session = make_session()
    group = session.query(models.Group).filter_by(groupname=args.groupname).scalar()
    if not group:
        print "No such group %s" % args.groupname
        return

    user = session.query(models.User).filter_by(username=args.username).scalar()
    if not user:
        print "No such user %s, creating..." % args.username
        user = models.User(username=args.username).add(session)
        session.commit()

    if args.subcommand == "add_member":
        print "Adding %s to group %s" % (args.username, args.groupname)
        group.add_member(user, user, "grouper-ctl join", status="actioned")
        models.AuditLog.log(
            session, user.id, 'join_group',
            '{} manually joined via grouper-ctl'.format(args.username),
            on_group_id=group.id)
        session.commit()

    elif args.subcommand == "remove_member":
        print "Removing %s from group %s" % (args.username, args.groupname)
        group.revoke_member(user, user, "grouper-ctl remove")
        models.AuditLog.log(
            session, user.id, 'leave_group',
            '{} manually left via grouper-ctl'.format(args.username),
            on_group_id=group.id)
        session.commit()


def main():

    description_msg = "Grouper Control"
    parser = argparse.ArgumentParser(description=description_msg)

    parser.add_argument("-c", "--config", default="/etc/grouper.yaml",
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0,
                        help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % grouper.__version__,
                        help="Display version information.")

    subparsers = parser.add_subparsers(dest="command")

    sync_db_parser = subparsers.add_parser("sync_db", help="Apply database schema to database.")
    sync_db_parser.set_defaults(func=sync_db_command)

    user_proxy_parser = subparsers.add_parser("user_proxy",
                                              help="Start a development reverse proxy.")
    user_proxy_parser.set_defaults(func=user_proxy_command)
    user_proxy_parser.add_argument("-p", "--listen-port", default=8888, type=int,
                                   help="Port to listen on.")
    user_proxy_parser.add_argument("-P", "--backend-port", default=8989, type=int,
                                   help="Port to proxy to.")
    user_proxy_parser.add_argument("username", nargs="?", default=None)

    shell_parser = subparsers.add_parser(
        "shell", help="Launch a shell with models imported.")
    shell_parser.set_defaults(func=shell_command)

    user_parser = subparsers.add_parser(
        "user", help="Edit user")
    user_parser.set_defaults(func=user_command)
    user_subparser = user_parser.add_subparsers(dest="subcommand")

    user_create_parser = user_subparser.add_parser(
        "create", help="Create a new user account")
    user_create_parser.add_argument("username")
    user_create_parser.add_argument("--role-user", default=False, action="store_true",
                                    help="If given, identifies user as a role user.")

    user_key_parser = user_subparser.add_parser(
        "add_public_key", help="Add public key to user")
    user_key_parser.add_argument("username")
    user_key_parser.add_argument("public_key")

    user_set_metadata_parser = user_subparser.add_parser(
        "set_metadata", help="Set metadata on user")
    user_set_metadata_parser.add_argument("username")
    user_set_metadata_parser.add_argument("metadata_key")
    user_set_metadata_parser.add_argument("metadata_value")

    group_parser = subparsers.add_parser(
        "group", help="Edit groups and membership")
    group_parser.set_defaults(func=group_command)
    group_subparser = group_parser.add_subparsers(dest="subcommand")

    group_join_parser = group_subparser.add_parser(
        "add_member", help="Join a user to a group")
    group_join_parser.add_argument("groupname")
    group_join_parser.add_argument("username")

    group_remove_parser = group_subparser.add_parser(
        "remove_member", help="Remove a user from a group")
    group_remove_parser.add_argument("groupname")
    group_remove_parser.add_argument("username")

    capabilities_parser = subparsers.add_parser(
        "capabilities", help="Make a user an user or group admin.")
    capabilities_parser.set_defaults(func=capabilities_command)
    capabilities_subparser = capabilities_parser.add_subparsers(dest="subcommand")

    capabilities_list_parser = capabilities_subparser.add_parser(
        "list", help="List capabilities of a user.")
    capabilities_list_parser.add_argument("username")

    capabilities_add_parser = capabilities_subparser.add_parser(
        "add", help="Add capabilities to a user.")
    capabilities_add_parser.add_argument("username")
    capabilities_add_parser.add_argument("capability", choices=Capabilities.words.keys())

    capabilities_rm_parser = capabilities_subparser.add_parser(
        "rm", help="Remove capabilities from a user.")
    capabilities_rm_parser.add_argument("username")
    capabilities_rm_parser.add_argument("capability", choices=Capabilities.words.keys())

    args = parser.parse_args()
    settings.start_config_thread(args.config)

    log_level = get_loglevel(args)
    logging.basicConfig(
        level=log_level,
        format=settings.log_format,
    )

    if log_level < 0:
        sa_log.setLevel(logging.INFO)

    args.func(args)

if __name__ == "__main__":
    main()
