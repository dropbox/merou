#!/usr/bin/env python

import argparse
import logging
import os
import sys

import tornado.httpserver
import tornado.ioloop

import grouper
from grouper.api.routes import HANDLERS
from grouper.api.settings import settings
from grouper.app import Application
from grouper.background import BackgroundThread
from grouper.database import DbRefreshThread
from grouper.graph import GroupGraph
from grouper.models.base.session import get_db_engine, Session
from grouper.plugin import load_plugins
from grouper.settings import default_settings_path
from grouper.thread_watchdog import start_watchdog
from grouper.util import get_loglevel, get_database_url


sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


try:
    from raven.contrib.tornado import AsyncSentryClient
    raven_installed = True
except ImportError:
    raven_installed = False


def main(argv):

    parser = argparse.ArgumentParser(description="Grouper Web Server.")
    parser.add_argument("-c", "--config", default=default_settings_path(),
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0,
                        help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % grouper.__version__,
                        help="Display version information.")
    parser.add_argument("-a", "--address", type=str, default=None,
                        help="Override address in config.")
    parser.add_argument("-p", "--port", type=int, default=None,
                        help="Override port in config.")
    args = parser.parse_args()
    settings.start_config_thread(args.config, "api")

    log_level = get_loglevel(args)
    logging.basicConfig(
        level=log_level,
        format=settings.log_format,
    )

    if log_level < 0:
        sa_log.setLevel(logging.INFO)

    if settings.plugin_dir:
        if not os.path.exists(settings.plugin_dir):
            logging.fatal("Plugin directory does not exist")
            sys.exit(1)
        load_plugins(settings.plugin_dir, service_name="grouper-api")

    tornado_settings = {
        "debug": settings.debug,
    }

    Session.configure(bind=get_db_engine(get_database_url(settings)))

    logging.info("Initilializing graph data.")
    session = Session()
    graph = GroupGraph.from_db(session)
    session.close()

    my_settings = {
        "graph": graph,
    }

    application = Application(HANDLERS, my_settings=my_settings, **tornado_settings)

    sentry_client = None
    if settings.sentry_dsn:
        logging.info("sentry DSN set")
        if not raven_installed:
            logging.warning("raven not installed, not enabling sentry")
        else:
            logging.info("enabling sentry")
            sentry_client = AsyncSentryClient(settings.sentry_dsn)

    application.sentry_client = sentry_client

    refresher = DbRefreshThread(settings, graph, settings.refresh_interval, sentry_client)
    refresher.daemon = True
    refresher.start()

    background = BackgroundThread(settings, sentry_client)
    background.daemon = True
    background.start()

    threads = [
            ('database/graph', refresher),
            ('background', background),
            ]
    start_watchdog(threads, sentry_client, settings.watchdog_wake_frequency_ms)

    address = args.address or settings.address
    port = args.port or settings.port

    logging.info("Starting application server on port %d", port)
    server = tornado.httpserver.HTTPServer(application)
    server.bind(port, address=address)
    server.start()
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        tornado.ioloop.IOLoop.instance().stop()
    finally:
        print "Bye"


if __name__ == "__main__":
    main(sys.argv)
