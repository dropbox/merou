#!/usr/bin/env python

import argparse
import logging
import os
import sys
from threading import Thread

import tornado.httpserver
import tornado.ioloop

from grouper.app import Application
from grouper.database import DbRefreshThread
import grouper.fe
from grouper.fe.routes import HANDLERS
from grouper.fe.settings import settings
from grouper.fe.template_util import get_template_env
from grouper.graph import Graph
from grouper.models.base.session import get_db_engine, Session
from grouper.plugin import load_plugins
from grouper.settings import default_settings_path
from grouper.thread_watchdog import start_watchdog
from grouper.util import get_loglevel, get_database_url


try:
    from raven.contrib.tornado import AsyncSentryClient
    raven_installed = True
except ImportError:
    raven_installed = False

sa_log = logging.getLogger("sqlalchemy.engine.base.Engine")


def main(argv):

    parser = argparse.ArgumentParser(description="Grouper Web Server.")
    parser.add_argument("-c", "--config", default=default_settings_path(),
                        help="Path to config file.")
    parser.add_argument("-v", "--verbose", action="count", default=0,
                        help="Increase logging verbosity.")
    parser.add_argument("-q", "--quiet", action="count", default=0,
                        help="Decrease logging verbosity.")
    parser.add_argument("-V", "--version", action="version",
                        version="%%(prog)s %s" % grouper.__version__,
                        help="Display version information.")
    parser.add_argument("-a", "--address", type=str, default=None,
                        help="Override address in config.")
    parser.add_argument("-p", "--port", type=int, default=None,
                        help="Override port in config.")
    parser.add_argument("-n", "--deployment-name", type=str, default="",
                        help="Name of the deployment.")

    args = parser.parse_args()
    settings.start_config_thread(args.config, "fe")

    if settings.debug and settings.num_processes > 1:
        logging.fatal("Debug mode does not support multiple processes.")
        sys.exit(1)

    if settings.plugin_dir:
        if not os.path.exists(settings.plugin_dir):
            logging.fatal("Plugin directory does not exist")
            sys.exit(1)
        load_plugins(settings.plugin_dir, service_name="grouper-fe")

    log_level = get_loglevel(args)
    logging.basicConfig(
        level=log_level,
        format=settings.log_format,
    )

    if log_level < 0:
        sa_log.setLevel(logging.INFO)

    tornado_settings = {
        "static_path": os.path.join(os.path.dirname(grouper.fe.__file__), "static"),
        "debug": settings.debug,
        "xsrf_cookies": True,
    }

    template_env = get_template_env(deployment_name=args.deployment_name)

    Session.configure(bind=get_db_engine(get_database_url(settings)))

    logging.info("Initilializing graph data.")
    session = Session()
    graph = Graph()
    graph.update_from_db(session)
    session.close()

    my_settings = {
        "db_session": Session,
        "template_env": template_env,
    }

    application = Application(HANDLERS, my_settings=my_settings, **tornado_settings)

    sentry_client = None
    if settings.sentry_dsn:
        logging.info("sentry DSN set")
        if not raven_installed:
            logging.warning("raven not installed, not enabling sentry")
        else:
            logging.info("enabling sentry")
            sentry_client = AsyncSentryClient(settings.sentry_dsn)

    application.sentry_client = sentry_client

    refresher = DbRefreshThread(settings, graph, settings.refresh_interval, sentry_client)
    refresher.daemon = True
    refresher.start()

    threads = [
            ('database/graph', refresher),
            ]
    start_watchdog(threads, sentry_client, settings.watchdog_wake_frequency_ms)

    address = args.address or settings.address
    port = args.port or settings.port

    logging.info(
        "Starting application server with %d processes on port %d",
        settings.num_processes, port
    )
    server = tornado.httpserver.HTTPServer(application)
    server.bind(port, address=address)
    server.start(settings.num_processes)
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        tornado.ioloop.IOLoop.instance().stop()
    finally:
        print "Bye"


if __name__ == "__main__":
    main(sys.argv)
