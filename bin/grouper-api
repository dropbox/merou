#!/usr/bin/env python

import argparse
from contextlib import closing
import logging
import os
import sys

import tornado.httpserver
import tornado.ioloop

import grouper
from grouper.api.routes import HANDLERS
from grouper.api.settings import settings
from grouper.app import Application
from grouper.background import BackgroundThread
from grouper.database import DbRefreshThread
from grouper.error_reporting import get_sentry_client, SentryProxy, setup_signal_handlers
from grouper.graph import Graph, GroupGraph
from grouper.models.base.session import get_db_engine, Session
from grouper.plugin import load_plugins
from grouper.setup import build_arg_parser, setup_logging
from grouper.util import get_loglevel, get_database_url


def get_application(graph, settings, sentry_client):
    # type: (GroupGraph, Settings, SentryProxy, str) -> Application
    my_settings = {
        "graph": graph,
        "db_session": Session,
    }

    tornado_settings = {
        "debug": settings.debug,
    }

    application = Application(HANDLERS, my_settings=my_settings, **tornado_settings)
    application.sentry_client = sentry_client

    return application


def main(args, sentry_client):
    # type: (argparse.Namespace, SentryProxy) -> None

    log_level = logging.getLevelName(logging.getLogger().level)
    logging.info("begin. log_level={}".format(log_level))

    if settings.plugin_dir:
        assert os.path.exists(settings.plugin_dir), "Plugin directory does not exist"
        load_plugins(settings.plugin_dir, service_name="grouper_api")

    # setup database
    logging.debug("configure database session")
    Session.configure(bind=get_db_engine(get_database_url(settings)))

    settings.start_config_thread(args.config, "api")

    with closing(Session()) as session:
        graph = Graph()
        graph.update_from_db(session)

    refresher = DbRefreshThread(settings, graph, settings.refresh_interval, sentry_client)
    refresher.daemon = True
    refresher.start()

    background = BackgroundThread(settings, sentry_client)
    background.daemon = True
    background.start()

    application = get_application(graph, settings, sentry_client)

    address = args.address or settings.address
    port = args.port or settings.port

    logging.info("Starting application server on port %d", port)
    server = tornado.httpserver.HTTPServer(application)
    server.bind(port, address=address)
    server.start()
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        tornado.ioloop.IOLoop.instance().stop()
    finally:
        print "Bye"


if __name__ == "__main__":
    setup_signal_handlers()

    # get arguments
    parser = build_arg_parser("Grouper API Server.")
    args = parser.parse_args()

    try:
        # load settings
        settings.update_from_config(args.config, "api")

        # setup logging
        setup_logging(args, settings.log_format)

        # setup sentry
        sentry_client = get_sentry_client(settings.sentry_dsn)
    except:
        logging.exception('uncaught exception in startup')
        sys.exit(1)

    try:
        main(args, sentry_client)
    except:
        sentry_client.captureException()
    finally:
        logging.info("end")
