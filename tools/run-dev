#!/usr/bin/env python

import optparse
import subprocess
import os
import signal
import sys

parser = optparse.OptionParser(r"""

Starts the app listening on localhost, for local development.

This script launches the various Tornado servers, then runs a reverse proxy
which serves to the frontend.  After it's all up and running, browse to

    http://localhost:8888/
""")

parser.add_option(
    '--listen-host',
    default='127.0.0.1', help='Host on which the proxy listens'
)
parser.add_option(
    '--listen-port',
    default='8888', help='Port on which the proxy listens'
)
parser.add_option(
    '--user',
    default='admin@example.com', help='Set the user for the proxy'
)

(options, args) = parser.parse_args()

os.chdir(os.path.join(os.path.dirname(__file__), '..'))

# Add the grouper directory to the Python environment.
if "PYTHONPATH" in os.environ:
    os.environ["PYTHONPATH"] = os.getcwd() + ":" + os.environ["PYTHONPATH"]
else:
    os.environ["PYTHONPATH"] = os.getcwd()

# Set up a new process group, so that we can later kill the servers
# and all of the processes they spawn.
os.setpgrp()

# Start the services.
settings = os.environ.get("GROUPER_SETTINGS", "config/dev.yaml")
cmds = [
    [
        sys.executable,
        "bin/grouper-ctl",
        "-vvc",
        settings,
        "user_proxy",
        "--listen-host",
        options.listen_host,
        "--listen-port",
        options.listen_port,
        options.user,
    ],
    [sys.executable, "bin/grouper-fe", "--config={}".format(settings)],
    [sys.executable, "bin/grouper-api", "--config={}".format(settings)],
    [sys.executable, "bin/grouper-background", "--config={}".format(settings)],
]
for cmd in cmds:
    subprocess.Popen(cmd)

# Wait for a signal and then shut everything down.
try:
    signal.pause()
except KeyboardInterrupt:
    print("Terminating development environment")
finally:
    # Kill everything in our process group.
    os.killpg(0, signal.SIGTERM)
